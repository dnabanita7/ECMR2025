import json
import re
from collections import defaultdict

def parse_rddl_file(file_path):
    """
    Save top 3 plans generated by RDDL-PROST
    """
    with open(file_path, "r") as file:
        lines = file.readlines()

    round_data = {}
    current_round = None
    current_actions = []
    reward_pattern = re.compile(r"\*\* Round reward: (\d+\.\d+)")
    round_pattern = re.compile(r"Round (\d+) / \d+")

    for line in lines:
        round_match = round_pattern.search(line)
        reward_match = reward_pattern.search(line)
        
        if round_match:
            if current_round is not None:
                round_data[current_round] = {"actions": current_actions, "reward": current_reward, "action_count": len(current_actions)}
            
            current_round = int(round_match.group(1))
            current_actions = []
        elif "** Actions received:" in line:
            actions = line.split("** Actions received: ")[-1].strip()
            if actions and actions != "[]":
                current_actions.append(actions)
        elif reward_match:
            current_reward = float(reward_match.group(1))

    if current_round is not None:
        round_data[current_round] = {"actions": current_actions, "reward": current_reward, "action_count": len(current_actions)}

    top_rounds = sorted(round_data.items(), key=lambda x: (x[1]['reward'], x[1]['action_count']), reverse=True)[:3]
    top_rounds_dict = {f"round_{r[0]}": r[1] for r in top_rounds}

    output_file = "top_rounds.json"
    with open(output_file, "w") as json_file:
        json.dump(top_rounds_dict, json_file, indent=4)

    print(f"Top 3 rounds saved to {output_file}")

if __name__ == "__main__":
    input_file = "prserve_a_drink_coffee_plans.txt"
    parse_rddl_file(input_file)



# import json
# import re
# import os
# from collections import defaultdict


# def parse_rddl_file(file_path, output_dir):
#     with open(file_path, "r") as file:
#         lines = file.readlines()

#     round_data = {}
#     current_round = None
#     current_actions = []
#     reward_pattern = re.compile(r"\*\* Round reward: (\d+\.\d+)")
#     round_pattern = re.compile(r"Round (\d+) / \d+")

#     for line in lines:
#         round_match = round_pattern.search(line)
#         reward_match = reward_pattern.search(line)

#         if round_match:
#             if current_round is not None:
#                 round_data[current_round] = {
#                     "actions": current_actions,
#                     "reward": current_reward,
#                     "action_count": len(current_actions),
#                 }

#             current_round = int(round_match.group(1))
#             current_actions = []
#         elif "** Actions received:" in line:
#             actions = line.split("** Actions received: ")[-1].strip()
#             if actions and actions != "[]":
#                 current_actions.append(actions)
#         elif reward_match:
#             current_reward = float(reward_match.group(1))

#     if current_round is not None:
#         round_data[current_round] = {
#             "actions": current_actions,
#             "reward": current_reward,
#             "action_count": len(current_actions),
#         }

#     top_rounds = sorted(
#         round_data.items(), key=lambda x: (x[1]["reward"], x[1]["action_count"]), reverse=True
#     )[:3]
#     top_rounds_dict = {f"round_{r[0]}": r[1] for r in top_rounds}

#     file_name = os.path.basename(file_path).replace(".txt", "")
#     output_file = os.path.join(output_dir, f"{file_name}_top_rounds.json")

#     with open(output_file, "w") as json_file:
#         json.dump(top_rounds_dict, json_file, indent=4)

#     print(f"Top 3 rounds for '{file_name}' saved to '{output_file}'")


# if __name__ == "__main__":
#     input_dir = "rddl_text_plans"
#     output_dir = "rddl_top_rounds"

#     if not os.path.exists(output_dir):
#         os.makedirs(output_dir)

#     for filename in os.listdir(input_dir):
#         if filename.endswith(".txt"):
#             file_path = os.path.join(input_dir, filename)
#             parse_rddl_file(file_path, output_dir)

