domain household_v2 {

    types {
        location : object;
        item : object;
        agent : object;
        receptacle : object;

        sensitiveObject : item;
        food : item;
        drink : item;
        toBake : item;
        toBoil : item;
        toFry : item;
        toRoast : item;

        sliceable : food;
        vegetable : sliceable;
        fruit : sliceable;

        mobileR : receptacle;
        fragileR : mobileR;
        immobileR : receptacle;
    };

    pvariables {

        // State fluents

        agent_near(agent, immobileR, location)                  : { state-fluent, bool, default = false }; // agent near immobile receptacle at a location 
        agent_at(agent, location)                               : { state-fluent, bool, default = false }; // agent at location

        receptacle_at(mobileR, immobileR, location) 			: { state-fluent, bool, default = false }; // mobile receptacle in immobile receptacle at location
        bigObject_at(item, location) 						    : { state-fluent, bool, default = false };
        stuff_at(item, immobileR, location) 					: { state-fluent, bool, default = false };

        agent_switched_on(agent, item, immobileR, location) 	: { state-fluent, bool, default = false };
        agent_switched_off(agent, item, immobileR, location) 	: { state-fluent, bool, default = false };

        In_agent_hand(agent, item)						    : { state-fluent, bool, default = false }; // item inhand
        inhandbigObject(agent, item)						: { state-fluent, bool, default = false }; // item inhand
        inhandmobileR(agent, mobileR)						: { state-fluent, bool, default = false }; // item inhand

        cleaned(item)     							: { state-fluent, bool, default = false }; // item cleaned or not
        sliced(item)     							: { state-fluent, bool, default = false }; 
        cooked(item)								: { state-fluent, bool, default = false };
        prepared(item)								: { state-fluent, bool, default = false };
        baked(item)								    : { state-fluent, bool, default = false };
        salad_prepared(fruit, fruit, fruit)        	: { state-fluent, bool, default = false };

        pizza_baked								    : { state-fluent, bool, default = false };  
        pizza_base_prepared							: { state-fluent, bool, default = false };
        boiled(item)								: { state-fluent, bool, default = false };
        roasted(item)							    : { state-fluent, bool, default = false };
        egg_prepared(item)							: { state-fluent, bool, default = false };

        fruit_served(item, fragileR, immobileR, location) 			: { state-fluent, bool, default = false };
        food_served(food, fragileR, immobileR, location) 			: { state-fluent, bool, default = false };
        baked_served(item, fragileR, immobileR, location) 			: { state-fluent, bool, default = false };
        drink_served(drink, fragileR, immobileR, location)  			: { state-fluent, bool, default = false };
        veggy_served(item, fragileR, immobileR, location) 			: { state-fluent, bool, default = false };
        pizza_served(fragileR, immobileR, location) 				: { state-fluent, bool, default = false };

        open(immobileR, location) 					        : { state-fluent, bool, default = false };

        cleaned_remaining_food(item) 				        : { state-fluent, bool, default = false };
        dishes_cleaned 								        : { state-fluent, bool, default = false };

        FireExtinguished(location) 					        : { state-fluent, bool, default = true };

        washed_clothes 								        : { state-fluent, bool, default = false };
        Ironed_Clothes 								        : { state-fluent, bool, default = false };
        clothes_folded 								        : { state-fluent, bool, default = false };
        laundrydone 								        : { state-fluent, bool, default = false };

        agent_switch_off(agent, item)						: { state-fluent, bool, default = false };
        agent_switch_on(agent, item, location) 				: { state-fluent, bool, default = false };

        room_cleaned(location) 						        : { state-fluent, bool, default = false };
        all_rooms_cleaned 							        : { state-fluent, bool, default = false };

        electronics_cleaned(item, location) 			    : { state-fluent, bool, default = false };
        electronic_items_cleaned 						    : { state-fluent, bool, default = false };

        agent_hold(agent, item, location) 					: { state-fluent, bool, default = false };
        item_in(item, mobileR, immobileR, location) 		: { state-fluent, bool, default = false };
        immobileR_at(immobileR, location) 					: { state-fluent, bool, default = false };

        charged(item) 								        : { state-fluent, bool, default = false };
        provided_at(item, immobileR, location) 		        : { state-fluent, bool, default = false };

        party_at(location) 							        : { state-fluent, bool, default = false };
        hands_occupied_wo(agent) 						    : { state-fluent, bool, default = false };
        hands_occupied_wr(agent) 						    : { state-fluent, bool, default = false };
        heavy_obj_in_hand(agent) 						    : { state-fluent, bool, default = false };

        receptacle_cleaned(immobileR, location) 			: { state-fluent, bool, default = false };

        office_ready 								        : { state-fluent, bool, default = false };
        bag_prepared(item, item , item) 					: { state-fluent, bool, default = false };
        prepared_clothes(item, immobileR, location) 		: { state-fluent, bool, default = false };

        // Action fluents

        // Low-level tasks
        Agent_moves_BR(agent, immobileR, immobileR, location, location) 	: { action-fluent, bool, default = false }; // Move between receptacles

        Agent_Switches_on(agent, item, immobileR, location) 			: { action-fluent, bool, default = false }; // For receptacles
        Agent_Switches_off(agent, item, immobileR, location)			: { action-fluent, bool, default = false }; // For receptacles

        agent_Switch_on_act(agent, item, location) 				    : { action-fluent, bool, default = false }; // For big objects
        agent_Switch_off_act(agent, item, location) 				: { action-fluent, bool, default = false }; // For big objects

        Agent_PickUp(agent, item, immobileR, location) 				: { action-fluent, bool, default = false }; // Move item placed on immobile receptacles
        Agent_PutDown(agent, item, immobileR, location) 			: { action-fluent, bool, default = false }; // Move item placed on immobile receptacles

        Human_Picks_S(agent, item, immobileR, location) 		: { action-fluent, bool, default = false }; // sensitiveObject
        Human_PutDowns_S(agent, item, immobileR, location) 		: { action-fluent, bool, default = false }; // sensitiveObject

        Agent_PutDownM(agent, item, mobileR, immobileR, location)		: { action-fluent, bool, default = false }; // item on mobileR

        Human_PutDown_S_MR(agent, item, mobileR, immobileR, location): { action-fluent, bool, default = false }; // sensitiveObject on mobileR

        Agent_PicksUp_BigObject(agent, item, location) 				: { action-fluent, bool, default = false };
        Agent_PutsDown_BigObject(agent, item, location) 			: { action-fluent, bool, default = false };

        Open_action(agent, immobileR, location) 				: { action-fluent, bool, default = false };

        Human_PicksUp_FReceptacle(agent, mobileR, immobileR, location) 	: { action-fluent, bool, default = false }; // fragileR
        Human_PutsDown_FReceptacle(agent, mobileR, immobileR, location) 	: { action-fluent, bool, default = false }; // fragileR

        Agent_PicksUp_Receptacle(agent, mobileR, immobileR, location) 		: { action-fluent, bool, default = false };
        Agent_PutsDown_Receptacle(agent, mobileR, immobileR, location) 		: { action-fluent, bool, default = false };

        // High level tasks

        agent_cleans(agent, item) 						: { action-fluent, bool, default = false };
        agent_slice(agent, sliceable, item) 				: { action-fluent, bool, default = false };

        Make_Fruit_Salad(agent, fruit, fruit, fruit, item)      		: { action-fluent, bool, default = false };

        agent_cooks(agent, food, item) 						: { action-fluent, bool, default = false };
        agent_boils(agent, toBoil, item) 					: { action-fluent, bool, default = false };
        agent_roast(agent, toRoast, item) 					: { action-fluent, bool, default = false };
        agent_prepare_eggs(agent, toFry, item) 				: { action-fluent, bool, default = false };

        agent_prepares_pizza_base(agent) 					: { action-fluent, bool, default = false };
        agent_bake_pizza(agent) 						: { action-fluent, bool, default = false };
        agent_serves_pizza(agent, fragileR, immobileR, location) 		: { action-fluent, bool, default = false };

        agent_serves_food(agent, item, fragileR, immobileR, location) 		: { action-fluent, bool, default = false };
        agent_serves_fruit(agent, item, fragileR, immobileR, location)		: { action-fluent, bool, default = false };
        agent_serves_vegetable(agent, item, fragileR, immobileR, location) : { action-fluent, bool, default = false };
        agent_serves_baked(agent, item, fragileR, immobileR, location) 	: { action-fluent, bool, default = false };

        BakeACake(agent, toBake, item) 					: { action-fluent, bool, default = false };

        agent_serves_drink(agent, drink, fragileR, immobileR, location) 	: { action-fluent, bool, default = false };

        remaining_food_cleaned(agent, item) 					: { action-fluent, bool, default = false };

        agent_washingDishes(agent) 						: { action-fluent, bool, default = false };

        agent_Extinguish_Fire(agent, location) 					: { action-fluent, bool, default = false };

        Agent_WashingClothes(agent) 						: { action-fluent, bool, default = false };

        Agent_IronClothes(agent) 						: { action-fluent, bool, default = false };

        Agent_FoldClothes(agent) 						: { action-fluent, bool, default = false };

        Laundry_Done 								: { action-fluent, bool, default = false };

        agent_holds_VC_hose(agent, location) 					: { action-fluent, bool, default = false };
        agent_starts_cleaning (agent, location) 				: { action-fluent, bool, default = false };

        robot_passes_to_human(item, receptacle, location) 			: { action-fluent, bool, default = false };

        agent_cleans_electronics(agent, item, location) 			: { action-fluent, bool, default = false };

        all_electronic_item_cleaned 						: { action-fluent, bool, default = false };
        house_cleaned 								: { action-fluent, bool, default = false };
        office_table_ready 							: { action-fluent, bool, default = false };

        agent_cleans_receptacle(agent, immobileR, location) 			: { action-fluent, bool, default = false };

        prepare_office_bag(agent, item, item, item) 				: { action-fluent, bool, default = false };
        clothes_prepared(agent, item, immobileR, location) 			: { action-fluent, bool, default = false };

        attached_for_charging(item) 						: { action-fluent, bool, default = false };
        agent_provides(item, immobileR, location) 				: { action-fluent, bool, default = false };
        party_starts(toBake) 							: { action-fluent, bool, default = false };

        // Non fluents
        COST(agent, immobileR, immobileR)					: { non-fluent, int, default = 0 }; // Move costs
        COOKTOP(immobileR)							: { non-fluent, bool, default = false }; // Burner
        EQUAL(item, item)							: { non-fluent, bool, default = false }; // Equivalent Food Items
        SALAD(item)								: { non-fluent, bool, default = false }; // Salad
        FRAGILE(mobileR)							: { non-fluent, bool, default = false }; // Fragile Objects
        HUMAN_AGENT(agent)							: { non-fluent, bool, default = false }; // Constant to determine agent == Human

        // Constants to be used in domain file
        FAUCET_CONST(item) : { non-fluent, bool, default = false };
        BURNER_SWITCH_CONST(item) : { non-fluent, bool, default = false };
        OVEN_SWITCH_CONST(item) : { non-fluent, bool, default = false };
        REMAINING_FOOD_CONST(item) : { non-fluent, bool, default = false };
        REMAINING_FRUIT_CONST(item) : { non-fluent, bool, default = false };
        REMAINING_BAKED_CONST(item) : { non-fluent, bool, default = false };
        REMAINING_VEGGY_CONST(item) : { non-fluent, bool, default = false };
        REMAINING_PIZZA_CONST(item) : { non-fluent, bool, default = false };
        DIRTY_DISHES_CONST(item) : { non-fluent, bool, default = false };
        DISHWASHER_SWITCH_CONST(item) : { non-fluent, bool, default = false };
        CLEANED_DISHES_CONST(item) : { non-fluent, bool, default = false };
        EXTINGUISHER_CONST(item) : { non-fluent, bool, default = false };
        PIZZA_BASE_CONST(item) : { non-fluent, bool, default = false };
        SAUCE_CONST(item) : { non-fluent, bool, default = false };
        VEGGY_CONST(item) : { non-fluent, bool, default = false };
        PREPARED_PIZZA_BASE_CONST(item) : { non-fluent, bool, default = false };
        BAKED_PIZZA_CONST(item) : { non-fluent, bool, default = false };
        DUSTING_CLOTH_CONST(item) : { non-fluent, bool, default = false };
        CLOTHES_CONST(item) : { non-fluent, bool, default = false };
        CLEANED_CLOTHES_CONST(item) : { non-fluent, bool, default = false };
        IRONED_CLOTHES_CONST(item) : { non-fluent, bool, default = false };
        FOLDED_CLOTHES_CONST(item) : { non-fluent, bool, default = false };
        WASHING_MACHINE_SWITCH_CONST(item) : { non-fluent, bool, default = false };
        VACUUM_CLEANER_CONST(item) : { non-fluent, bool, default = false };
        TV_CONST(item) : { non-fluent, bool, default = false };
        MUSIC_PLAYER_CONST(item) : { non-fluent, bool, default = false };
        COMPUTER_CONST(item) : { non-fluent, bool, default = false };
        DUST_MOP_CONST(item) : { non-fluent, bool, default = false };
        TRASH_CONST(item) : { non-fluent, bool, default = false };
        MEDICINES_CONST(item) : { non-fluent, bool, default = false };
        COLOR_LIGHTS_CONST(item) : { non-fluent, bool, default = false };
        LAPTOP_SWITCH_CONST(item) : { non-fluent, bool, default = false };
        WATER_BOTTLE_CONST(item) : { non-fluent, bool, default = false };
        STOVE_BURNER_1_CONST(immobileR) : { non-fluent, bool, default = false };
        STOVE_BURNER_2_CONST(immobileR) : { non-fluent, bool, default = false };
        STOVE_BURNER_3_CONST(immobileR) : { non-fluent, bool, default = false };
        STOVE_BURNER_4_CONST(immobileR) : { non-fluent, bool, default = false };
        SINK_CONST(immobileR) : { non-fluent, bool, default = false };
        COUNTERTOP_CONST(immobileR) : { non-fluent, bool, default = false };
        OVEN_CONST(immobileR) : { non-fluent, bool, default = false };
        DUSTBIN_1_CONST(immobileR) : { non-fluent, bool, default = false };
        FRIDGE_CONST(immobileR) : { non-fluent, bool, default = false };
        SHELF_CONST(immobileR) : { non-fluent, bool, default = false };
        RACK_CONST(immobileR) : { non-fluent, bool, default = false };
        CABINET_CONST(immobileR) : { non-fluent, bool, default = false };
        WASHING_MACHINE_CONST(immobileR) : { non-fluent, bool, default = false };
        LAUNDRY_BAG_CONST(immobileR) : { non-fluent, bool, default = false };
        IRONING_BOARD_CONST(immobileR) : { non-fluent, bool, default = false };
        CLOSET_CONST(immobileR) : { non-fluent, bool, default = false };
        DINING_TABLE_CONST(immobileR) : { non-fluent, bool, default = false };
        WORKING_TABLE_CONST(receptacle) : { non-fluent, bool, default = false };
        PAN_1_CONST(mobileR) : { non-fluent, bool, default = false };
        PAN_2_CONST(mobileR) : { non-fluent, bool, default = false };
        METAL_POT_CONST(mobileR) : { non-fluent, bool, default = false };
        OFFICE_BAG_CONST(mobileR) : { non-fluent, bool, default = false };
        KITCHEN_CONST(location) : { non-fluent, bool, default = false };
        BATHROOM_CONST(location) : { non-fluent, bool, default = false };
        LIVING_ROOM_CONST(location) : { non-fluent, bool, default = false };
        STORE_ROOM_CONST(location) : { non-fluent, bool, default = false };
        BOWL_1_CONST(mobileR): { non-fluent, bool, default = false };
        PLATE_1_CONST(mobileR): { non-fluent, bool, default = false };

        BIG_OBJECT(item) : { non-fluent, bool, default = false };
        ELECTRONICS(item) : { non-fluent, bool, default = false };
        SENSITIVE(item) : { non-fluent, bool, default = false };
        SLICEABLE_ITEM(item) : { non-fluent, bool, default = false };
        FRUIT_ITEM(item) : { non-fluent, bool, default = false };
        FOOD_ITEM(item) : { non-fluent, bool, default = false };
        BOIL_ITEM(item) : { non-fluent, bool, default = false };
        ROAST_ITEM(item) : { non-fluent, bool, default = false };
        FRY_ITEM(item) : { non-fluent, bool, default = false };
        VEGETABLE_ITEM(item)  : { non-fluent, bool, default = false };
        BAKE_ITEM(item) : { non-fluent, bool, default = false };
    };

    cpfs {

        agent_near'(?a, ?iR, ?l) = 
        // Did it move to ?iR ?l and become true?
        if (exists_{?from_R : immobileR, ?from_L : location} (Agent_moves_BR(?a, ?from_R, ?iR, ?from_L, ?l) ^ agent_near(?a, ?from_R, ?from_L)))
            then true
        // Did it leave ?iR ?l and become false?
        else if (exists_{?to_R : immobileR, ?to_L : location} (Agent_moves_BR(?a, ?iR, ?to_R, ?l, ?to_L) ^ agent_near(?a, ?iR, ?l)))
            then false
        // It didn't move, so it's current value persists (frame axiom)
        else
            agent_near(?a, ?iR, ?l);

        agent_at'(?a, ?l) = 
        // Did it move to ?l and become true?
        if (exists_{?from_R : immobileR, ?from_L : location, ?to_R: immobileR} (Agent_moves_BR(?a, ?from_R, ?to_R, ?from_L, ?l) ^ agent_at(?a, ?from_L)))
            then true
        // Did it leave ?l and become false?
        else if (exists_{?from_R : immobileR, ?to_R : immobileR, ?to_L : location} (Agent_moves_BR(?a, ?from_R, ?to_R, ?l, ?to_L) ^ agent_at(?a, ?l)))
            then false
        // It didn't move, so it's current value persists (frame axiom)
        else
            agent_at(?a, ?l);

        receptacle_at'(?mR, ?iR, ?l) = 
        if (exists_{?a : agent} (Agent_PicksUp_Receptacle(?a, ?mR, ?iR, ?l) ))
            then false
        else if(exists_{?a : agent} (Agent_PutsDown_Receptacle(?a, ?mR, ?iR, ?l) ^ FRAGILE(?mR) ^~COOKTOP(?iR) ))
            then true
        else if(exists_{?a : agent} (Agent_PutsDown_Receptacle(?a, ?mR, ?iR, ?l) ^ ~FRAGILE(?mR) ))
            then true
        else if(exists_{?a : agent, ?f : fragileR} (Human_PicksUp_FReceptacle(?a, ?f, ?iR, ?l) ^ HUMAN_AGENT(?a)))
            then false
        else if(exists_{?a : agent, ?f : fragileR} (Human_PutsDown_FReceptacle(?a, ?f, ?iR, ?l) ^ HUMAN_AGENT(?a) ))
            then true
        //else if(exists_{?a : agent, ?i : item} (Agent_PutDownM(?a, ?i, ?mR, ?iR, ?l) ))
        //	then true
        else
            receptacle_at(?mR, ?iR, ?l);

        bigObject_at'(?i, ?l) = 
        if (exists_{?a : agent} (Agent_PicksUp_BigObject(?a, ?i, ?l) ))
            then false
        else if (exists_{?a : agent} (Agent_PutsDown_BigObject(?a, ?i, ?l) ))
            then true
        else
            bigObject_at(?i, ?l);

        stuff_at'(?i, ?iR, ?l) = 
        if (exists_{?a : agent} (Agent_PickUp(?a, ?i, ?iR, ?l) ))
            then false
        else if(exists_{?a : agent} Agent_PutDown(?a, ?i, ?iR, ?l))
            then true
        else if(exists_{?a : agent} (Human_Picks_S(?a, ?i, ?iR, ?l)))
            then false
        else if(exists_{?a : agent} Human_PutDowns_S(?a, ?i, ?iR, ?l))
            then true
        else if (exists_{?a : agent, ?item_unsliced : sliceable} (agent_slice(?a, ?item_unsliced, ?i) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?o1 : fruit, ?o2 : fruit, ?o3 : fruit} (Make_Fruit_Salad(?a, ?o1, ?o2, ?o3, ?i ) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?o1 : food} (agent_cooks(?a, ?o1, ?i ) ^ STOVE_BURNER_1_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?o1 : toBoil} (agent_boils(?a, ?o1, ?i ) ^ STOVE_BURNER_2_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?o1 : toRoast} (agent_roast(?a, ?o1, ?i ) ^ STOVE_BURNER_3_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?o1 : toFry} (agent_prepare_eggs(?a, ?o1, ?i ) ^ STOVE_BURNER_4_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent} (agent_prepares_pizza_base(?a) ^ PREPARED_PIZZA_BASE_CONST(?i) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent} (agent_bake_pizza(?a) ^ BAKED_PIZZA_CONST(?i) ^ OVEN_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?fR : fragileR} (agent_serves_pizza(?a, ?fR, ?iR, ?l) ^ REMAINING_PIZZA_CONST(?i) ) )
            then true
        else if (exists_{?a : agent, ?fR : fragileR} (agent_serves_food(?a, ?i, ?fR, ?iR, ?l) ^ ( REMAINING_FOOD_CONST(?i) | DIRTY_DISHES_CONST(?i)) ))
            then true
        else if (exists_{?a : agent, ?fR : fragileR} (agent_serves_fruit(?a, ?i, ?fR, ?iR, ?l) ^ ( REMAINING_FRUIT_CONST(?i) | DIRTY_DISHES_CONST(?i)) ))
            then true
        else if (exists_{?a : agent, ?fR : fragileR} (agent_serves_vegetable(?a, ?i, ?fR, ?iR, ?l) ^ ( REMAINING_VEGGY_CONST(?i) | DIRTY_DISHES_CONST(?i)) ))
            then true
        else if (exists_{?a : agent, ?o1 : toBake} (BakeACake(?a, ?o1, ?i) ^ OVEN_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent, ?fR : fragileR} (agent_serves_baked(?a, ?i, ?fR, ?iR, ?l) ^ ( REMAINING_BAKED_CONST(?i) | DIRTY_DISHES_CONST(?i)) ))
            then true
        else if (exists_{?a : agent} (agent_washingDishes(?a) ^ CLEANED_DISHES_CONST(?i) ^ SINK_CONST(?iR) ^ KITCHEN_CONST(?l) ))
            then true
        else if (exists_{?a : agent} (Agent_WashingClothes(?a) ^ CLEANED_CLOTHES_CONST(?i) ^ WASHING_MACHINE_CONST(?iR) ^ BATHROOM_CONST(?l) ))
            then true
        else if (exists_{?a : agent} (Agent_IronClothes(?a) ^ IRONED_CLOTHES_CONST(?i) ^ IRONING_BOARD_CONST(?iR) ^ LIVING_ROOM_CONST(?l) ))
            then true
        else if (exists_{?a : agent} (Agent_FoldClothes(?a) ^ FOLDED_CLOTHES_CONST(?i) ^ IRONING_BOARD_CONST(?iR) ^ LIVING_ROOM_CONST(?l) ))
            then true
        else
            stuff_at(?i, ?iR, ?l);

        agent_switched_on'(?a, ?i, ?iR, ?l) = 
        if (Agent_Switches_on(?a, ?i, ?iR, ?l))
            then true
        else if (Agent_Switches_off(?a, ?i, ?iR, ?l))
            then false
        else
            agent_switched_on(?a, ?i, ?iR, ?l);
        
        agent_switched_off'(?a, ?i, ?iR, ?l) = 
        if (Agent_Switches_off(?a, ?i, ?iR, ?l))
            then true
        else if (Agent_Switches_on(?a, ?i, ?iR, ?l))
            then false
        else
            agent_switched_off(?a, ?i, ?iR, ?l);

        In_agent_hand'(?a, ?i) = 
        if (exists_{?iR: immobileR, ?l : location} Agent_PickUp(?a, ?i, ?iR, ?l))
            then true
        else if (exists_{?iR: immobileR, ?l : location} Agent_PutDown(?a, ?i, ?iR, ?l))
            then false
        else if (exists_{?iR: immobileR, ?l : location} Human_Picks_S(?a, ?i, ?iR, ?l))
            then true
        else if (exists_{?iR: immobileR, ?l : location} Human_PutDowns_S(?a, ?i, ?iR, ?l))
            then false
        else if (exists_{?m: mobileR, ?iR: immobileR, ?l : location} (Agent_PutDownM(?a, ?i, ?m, ?iR, ?l) ))
            then false
        else if (exists_{?m: mobileR, ?iR: immobileR, ?l : location} (Human_PutDown_S_MR(?a, ?i, ?m, ?iR, ?l) ))
            then false
        else if (exists_{?r : receptacle, ?l : location} (robot_passes_to_human(?i, ?r, ?l) ^ HUMAN_AGENT(?a) ^ ~BIG_OBJECT(?i) ))
            then true
        else if (exists_{?r : receptacle, ?l : location} (robot_passes_to_human(?i, ?r, ?l) ^ ~HUMAN_AGENT(?a) ^ ~BIG_OBJECT(?i) ))
            then false
        else
            In_agent_hand(?a, ?i);

        inhandbigObject'(?a, ?i) = 
        if (exists_{?l : location} (Agent_PicksUp_BigObject(?a, ?i, ?l) ))
            then true
        else if (exists_{?l : location} (Agent_PutsDown_BigObject(?a, ?i, ?l) ))
            then false
        else if (exists_{?r : receptacle, ?l : location} (robot_passes_to_human(?i, ?r, ?l) ^ HUMAN_AGENT(?a) ^ BIG_OBJECT(?i) ))
            then true
        else if (exists_{?r : receptacle, ?l : location} (robot_passes_to_human(?i, ?r, ?l) ^ ~HUMAN_AGENT(?a) ^ BIG_OBJECT(?i) ))
            then false
        else
            inhandbigObject(?a, ?i);

        inhandmobileR'(?a, ?mR) = 
        if (exists_{?iR: immobileR, ?l : location}( Human_PicksUp_FReceptacle(?a, ?mR, ?iR, ?l) ))
            then true
        else if(exists_{?iR: immobileR, ?l : location}( Human_PutsDown_FReceptacle(?a, ?mR, ?iR, ?l) ))
            then false
        else if (exists_{?iR: immobileR, ?l : location}( Agent_PicksUp_Receptacle(?a, ?mR, ?iR, ?l) ))
            then true
        else if(exists_{?iR: immobileR, ?l : location}( Agent_PutsDown_Receptacle(?a, ?mR, ?iR, ?l) ))
            then false
        else
            inhandmobileR(?a, ?mR);

        cleaned'(?i) = 
        if (exists_{?a : agent} (agent_cleans(?a, ?i) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            cleaned(?i);

        sliced'(?i) =         
        if (exists_{?a : agent, ?o1: sliceable} (agent_slice(?a, ?o1, ?i) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            sliced(?i);

        cooked'(?i) =
        if (exists_{?a : agent, ?o1: food} (agent_cooks(?a, ?o1, ?i) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            cooked(?i);        

        prepared'(?i) =
        if (exists_{?a: agent, ?o1 : fruit, ?o2 : fruit, ?o3 : fruit} (Make_Fruit_Salad(?a, ?o1, ?o2, ?o3, ?i) ))
            then true
        else
            prepared(?i);
            
        baked'(?i) =
        if (exists_{?a: agent, ?o1: toBake} (BakeACake(?a, ?o1, ?i) ))
            then true
        else
            baked(?i);

        salad_prepared'(?i1, ?i2, ?i3) = 
        if (exists_{?a: agent, ?o4 : item} (Make_Fruit_Salad(?a, ?i1, ?i2, ?i3, ?o4) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            salad_prepared(?i1, ?i2, ?i3);

        pizza_baked' = 
        if (exists_{?a: agent} (agent_bake_pizza(?a) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            pizza_baked;

        pizza_base_prepared' =
        if (exists_{?a: agent} (agent_prepares_pizza_base(?a) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            pizza_base_prepared;

        boiled'(?i) = 
        if (exists_{?a : agent, ?o1: toBoil} (agent_boils(?a, ?o1, ?i) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            boiled(?i);

        roasted'(?i) =
        if (exists_{?a : agent, ?o1: toRoast} (agent_roast(?a, ?o1, ?i) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            roasted(?i);

        egg_prepared'(?i) = 
        if (exists_{?a : agent, ?o1: toFry} (agent_prepare_eggs(?a, ?o1, ?i) ^ [forall_{?fR: fragileR} (~inhandmobileR(?a, ?fR))] ))
            then true
        else
            egg_prepared(?i);        

        fruit_served'(?fruit_it, ?mR, ?iR, ?l) =
        if (exists_{?a : agent} agent_serves_fruit(?a, ?fruit_it, ?mR, ?iR, ?l))
            then true
        else
            fruit_served(?fruit_it, ?mR, ?iR, ?l);

        food_served'(?foodItem, ?mR, ?iR, ?l) = 
        if (exists_{?a : agent} agent_serves_food(?a, ?foodItem, ?mR, ?iR, ?l))
            then true
        else
            food_served(?foodItem, ?mR, ?iR, ?l);

        baked_served'(?toBake_it, ?mR, ?iR, ?l) =
        if (exists_{?a : agent} agent_serves_baked(?a, ?toBake_it, ?mR, ?iR, ?l))
            then true
        else
            baked_served(?toBake_it, ?mR, ?iR, ?l);

        drink_served'(?drink_it, ?mR, ?iR, ?l) =
        if (exists_{?a : agent} agent_serves_drink(?a, ?drink_it, ?mR, ?iR, ?l))
            then true
        else
            drink_served(?drink_it, ?mR, ?iR, ?l);

        veggy_served'(?veg, ?mR, ?iR, ?l) = 
        if (exists_{?a : agent} agent_serves_vegetable(?a, ?veg, ?mR, ?iR, ?l))
            then true
        else
            veggy_served(?veg, ?mR, ?iR, ?l);

        pizza_served'(?mR, ?iR, ?l) = 
        if (exists_{?a : agent} agent_serves_pizza(?a, ?mR, ?iR, ?l))
            then true
        else
            pizza_served(?mR, ?iR, ?l);

        open'(?iR, ?l) = 
        if (exists_{?a: agent} Open_action(?a, ?iR, ?l))
            then true
        else
            open(?iR, ?l);

        cleaned_remaining_food'(?i) = 
        if (exists_{?a: agent} remaining_food_cleaned(?a, ?i))
            then true
        else
            cleaned_remaining_food(?i);        

        dishes_cleaned' = 
        if (exists_{?a: agent} agent_washingDishes(?a))
            then true
        else
            dishes_cleaned;  
        
        FireExtinguished'(?l) = 
        if (exists_{?a: agent} agent_Extinguish_Fire(?a, ?l))
            then true
        else
            FireExtinguished(?l);          

        washed_clothes' = 
        if (exists_{?a: agent} Agent_WashingClothes(?a))
            then true
        else
            washed_clothes;
        
        Ironed_Clothes' =
        if (exists_{?a: agent} Agent_IronClothes(?a))
            then true
        else
            Ironed_Clothes;
        
        clothes_folded' = 
        if (exists_{?a: agent} Agent_FoldClothes(?a))
            then true
        else
            clothes_folded;

        laundrydone' =
        if (Laundry_Done)
            then true
        else
            laundrydone;

        agent_switch_off'(?a, ?i) = 
        if (exists_{?l: location} (agent_Switch_on_act(?a, ?i, ?l)))
            then false
        else if (exists_{?l: location} (agent_Switch_off_act(?a, ?i, ?l)))
            then true
        else 
            agent_switch_off(?a, ?i);

        agent_switch_on'(?a, ?i, ?l) = 
        if (agent_Switch_on_act(?a, ?i, ?l))
            then true
        else if (agent_Switch_off_act(?a, ?i, ?l))
            then false
        else 
            agent_switch_on(?a, ?i, ?l);

        room_cleaned'(?l) =
        if (exists_{?a : agent} agent_starts_cleaning(?a, ?l))
            then true
        else
            room_cleaned(?l);

        all_rooms_cleaned' = 
        if (house_cleaned)
            then true
        else
            all_rooms_cleaned;

        electronics_cleaned'(?i, ?l) = 
        if (exists_{?a : agent} agent_cleans_electronics(?a, ?i, ?l))
            then true
        else
            electronics_cleaned(?i, ?l);

        electronic_items_cleaned' = 
        if (all_electronic_item_cleaned)
            then true
        else
            electronic_items_cleaned;

        agent_hold'(?a, ?bigObj, ?l) = 
        if (agent_holds_VC_hose(?a, ?l) ^ VACUUM_CLEANER_CONST(?bigObj))
            then true
        else
            agent_hold(?a, ?bigObj, ?l);

        item_in'(?i, ?mR, ?iR, ?l) = 
        if (exists_{?a : agent} (Agent_PutDownM(?a, ?i, ?mR, ?iR, ?l) ))
            then true
        else if (exists_{?a : agent} (Human_PutDown_S_MR(?a, ?i, ?mR, ?iR, ?l) ))
            then true
        else
            item_in(?i, ?mR, ?iR, ?l);

        immobileR_at'(?iR, ?l) = immobileR_at(?iR, ?l);

        charged'(?i) = 
        if (attached_for_charging(?i))
            then true
        else
            charged(?i);

        provided_at'(?i, ?iR, ?l) = 
        if (agent_provides(?i, ?iR, ?l) )
            then true
        else
            provided_at(?i, ?iR, ?l);

        party_at'(?l) = 
        if (exists_{?o : toBake} party_starts(?o) ^ LIVING_ROOM_CONST(?l))
            then true
        else
            party_at(?l);

        hands_occupied_wo'(?a) = 
        if (exists_{?i: item, ?iR: immobileR, ?l : location} (Agent_PickUp(?a, ?i, ?iR, ?l) ))
            then true
        else if (exists_{?i: item, ?iR: immobileR, ?l : location} (Agent_PutDown(?a, ?i, ?iR, ?l) ))
            then false
        else if (exists_{?o: sensitiveObject, ?iR: immobileR, ?l : location} (Human_Picks_S(?a, ?o, ?iR, ?l) ))
            then true
        else if (exists_{?o: sensitiveObject, ?iR: immobileR, ?l : location} (Human_PutDowns_S(?a, ?o, ?iR, ?l) ))
            then false
        else if (exists_{?i: item, ?m: mobileR, ?iR: immobileR, ?l : location} (Agent_PutDownM(?a, ?i, ?m, ?iR, ?l) ))
            then false
        else if (exists_{?o: sensitiveObject, ?m: mobileR, ?iR: immobileR, ?l : location} (Human_PutDown_S_MR(?a, ?o, ?m, ?iR, ?l) ))
            then false
        else 
            hands_occupied_wo(?a);

        hands_occupied_wr'(?a) = 
        if (exists_{?fR: fragileR, ?iR: immobileR, ?l : location}( Human_PicksUp_FReceptacle(?a, ?fR, ?iR, ?l) ))
            then true
        else if (exists_{?fR: fragileR, ?iR: immobileR, ?l : location}( Human_PutsDown_FReceptacle(?a, ?fR, ?iR, ?l) ))
            then false
        else if (exists_{?mR: mobileR, ?iR: immobileR, ?l : location}( Agent_PicksUp_Receptacle(?a, ?mR, ?iR, ?l) ))
            then true
        else if (exists_{?fR: mobileR, ?iR: immobileR, ?l : location}( Agent_PutsDown_Receptacle(?a, ?fR, ?iR, ?l) ))
            then false
        else
            hands_occupied_wr(?a);

        heavy_obj_in_hand'(?a) = 
        if (exists_{?i : item, ?l : location} (Agent_PicksUp_BigObject(?a, ?i, ?l) ))
            then true
        else if (exists_{?i : item, ?l : location} (Agent_PutsDown_BigObject(?a, ?i, ?l) ))
            then false
        else if (exists_{?l : location} (agent_holds_VC_hose(?a, ?l) ))
            then true
        else if (exists_{?l : location} (agent_starts_cleaning(?a, ?l) ))
            then false
        else if (exists_{?i: item, ?r : receptacle, ?l : location} (robot_passes_to_human(?i, ?r, ?l) ^ HUMAN_AGENT(?a) )) 
            then true
        else if (exists_{?i: item, ?r : receptacle, ?l : location} (robot_passes_to_human(?i, ?r, ?l) ^ ~HUMAN_AGENT(?a) )) 
            then false
        else
            heavy_obj_in_hand(?a);

        receptacle_cleaned'(?r, ?l) =
        if (exists_{?a : agent} (agent_cleans_receptacle(?a, ?r, ?l) ))
            then true
        else
            receptacle_cleaned(?r, ?l);

        office_ready' = 
        if (office_table_ready)
            then true
        else
            office_ready;

        bag_prepared'(?i1, ?i2, ?i3) = 
         if (exists_{?a : agent} (prepare_office_bag(?a, ?i1, ?i2, ?i3) ))
            then true
        else
            bag_prepared(?i1, ?i2, ?i3);       

        prepared_clothes'(?i, ?iR, ?l) = 
        if (exists_{?a : agent} (clothes_prepared(?a, ?i, ?iR, ?l)) )
            then true
        else
            prepared_clothes(?i, ?iR, ?l);
    };

    // To-add: Goal States
    reward = [sum_{?fruit_it: fruit, ?mR : fragileR, ?iR : immobileR, ?l :location} [1000 * fruit_served(?fruit_it, ?mR, ?iR, ?l)]]
             - [sum_{?a: agent, ?iR1: immobileR, ?iR2: immobileR, ?l1 : location, ?l2 : location} [COST(?a, ?iR1, ?iR2) * Agent_moves_BR(?a, ?iR1, ?iR2, ?l1, ?l2)]]
             
             - [sum_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [15 * Agent_Switches_on(?a, ?i, ?iR, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [10 * Agent_Switches_on(?a, ?i, ?iR, ?l) * ~HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [15 * Agent_Switches_off(?a, ?i, ?iR, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [10 * Agent_Switches_off(?a, ?i, ?iR, ?l) * ~HUMAN_AGENT(?a)]]

             - [sum_{?a: agent, ?o: item, ?l : location} [10 * agent_Switch_on_act(?a, ?o, ?l)]]
             - [sum_{?a: agent, ?o: item, ?l : location} [10 * agent_Switch_off_act(?a, ?o, ?l)]]

             - [sum_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [20 * Agent_PickUp(?a, ?i, ?iR, ?l)]]
             - [sum_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [20 * Agent_PutDown(?a, ?i, ?iR, ?l)]]

             - [sum_{?a: agent, ?i: sensitiveObject, ?iR: immobileR, ?l : location} [15 * Human_Picks_S(?a, ?i, ?iR, ?l)]]
             - [sum_{?a: agent, ?i: sensitiveObject, ?iR: immobileR, ?l : location} [15 * Human_PutDowns_S(?a, ?i, ?iR, ?l)]]

             - [sum_{?a: agent, ?i: item, ?m: mobileR, ?iR: immobileR, ?l : location} [30 * Agent_PutDownM(?a, ?i, ?m, ?iR, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?i: item, ?m: mobileR, ?iR: immobileR, ?l : location} [20 * Agent_PutDownM(?a, ?i, ?m, ?iR, ?l) * ~HUMAN_AGENT(?a)]]

             - [sum_{?a: agent, ?o: sensitiveObject, ?m: mobileR, ?iR: immobileR, ?l : location} [2 * Human_PutDown_S_MR(?a, ?o, ?m, ?iR, ?l) * HUMAN_AGENT(?a)]]

             - [sum_{?a: agent, ?o: item, ?l : location} [20 * Agent_PicksUp_BigObject(?a, ?o, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?o: item, ?l : location} [10 * Agent_PicksUp_BigObject(?a, ?o, ?l) * ~HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?o: item, ?l : location} [20 * Agent_PutsDown_BigObject(?a, ?o, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?o: item, ?l : location} [10 * Agent_PutsDown_BigObject(?a, ?o, ?l) * ~HUMAN_AGENT(?a)]]

             - [sum_{?a: agent, ?iR: immobileR, ?l : location} [10 * Open_action(?a, ?iR, ?l)]]

             - [sum_{?a: agent, ?fR: fragileR, ?iR: immobileR, ?l : location} [5 * Human_PicksUp_FReceptacle(?a, ?fR, ?iR, ?l)]]
             - [sum_{?a: agent, ?fR: fragileR, ?iR: immobileR, ?l : location} [5 * Human_PutsDown_FReceptacle(?a, ?fR, ?iR, ?l)]]

             - [sum_{?a: agent, ?mR: mobileR, ?iR: immobileR, ?l : location} [20 * Agent_PicksUp_Receptacle(?a, ?mR, ?iR, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?mR: mobileR, ?iR: immobileR, ?l : location} [10 * Agent_PicksUp_Receptacle(?a, ?mR, ?iR, ?l) * ~HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?mR: mobileR, ?iR: immobileR, ?l : location} [20 * Agent_PutsDown_Receptacle(?a, ?mR, ?iR, ?l) * HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?mR: mobileR, ?iR: immobileR, ?l : location} [10 * Agent_PutsDown_Receptacle(?a, ?mR, ?iR, ?l) * ~HUMAN_AGENT(?a)]]
    
             - [sum_{?a: agent, ?i: item} [25 * (agent_cleans(?a, ?i) ^ ~HUMAN_AGENT(?a))]]
             - [sum_{?a: agent, ?i: item} [75 * (agent_cleans(?a, ?i) ^ HUMAN_AGENT(?a))]]

             - [sum_{?a: agent, ?o1 : sliceable, ?o2 : item} [15 * (agent_slice(?a, ?o1, ?o2) ^ ~HUMAN_AGENT(?a))]]
             - [sum_{?a: agent, ?o1 : sliceable, ?o2 : item} [30 * (agent_slice(?a, ?o1, ?o2) ^ HUMAN_AGENT(?a))]]

             - [sum_{?a: agent, ?o1 : fruit, ?o2: fruit, ?o3: fruit, ?o4 : item} [80 * [Make_Fruit_Salad(?a, ?o1, ?o2, ?o3, ?o4) ^ ~HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : food, ?o2 : food} [80 * [agent_cooks(?a, ?o1, ?o2) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : food, ?o2 : food} [50 * [agent_cooks(?a, ?o1, ?o2) ^ HUMAN_AGENT(?a)]]]
    
             - [sum_{?a: agent, ?o1 : toBoil, ?o2 : toBoil} [15 * [agent_boils(?a, ?o1, ?o2) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : toBoil, ?o2 : toBoil} [30 * [agent_boils(?a, ?o1, ?o2) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : toRoast, ?o2 : toRoast} [60 * [agent_roast(?a, ?o1, ?o2) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : toRoast, ?o2 : toRoast} [25 * [agent_roast(?a, ?o1, ?o2) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : toFry, ?o2 : toFry} [80 * [agent_prepare_eggs(?a, ?o1, ?o2) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : toFry, ?o2 : toFry} [25 * [agent_prepare_eggs(?a, ?o1, ?o2) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent} [60 * [agent_prepares_pizza_base(?a) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent} [20 * [agent_prepares_pizza_base(?a) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent} [20 * [agent_bake_pizza(?a) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent} [60 * [agent_bake_pizza(?a) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?mR: fragileR, ?iR: immobileR, ?l : location} [20 * [agent_serves_pizza(?a, ?mR, ?iR, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?mR: fragileR, ?iR: immobileR, ?l : location} [40 * [agent_serves_pizza(?a, ?mR, ?iR, ?l) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?foodItem : food, ?mR: fragileR, ?iR: immobileR, ?l : location} [20 * [agent_serves_food(?a, ?foodItem, ?mR, ?iR, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?foodItem : food, ?mR: fragileR, ?iR: immobileR, ?l : location} [40 * [agent_serves_food(?a, ?foodItem, ?mR, ?iR, ?l) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : fruit, ?mR: fragileR, ?iR: immobileR, ?l : location} [20 * [agent_serves_fruit(?a, ?o1, ?mR, ?iR, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : fruit, ?mR: fragileR, ?iR: immobileR, ?l : location} [40 * [agent_serves_fruit(?a, ?o1, ?mR, ?iR, ?l) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : vegetable, ?mR: fragileR, ?iR: immobileR, ?l : location} [20 * [agent_serves_vegetable(?a, ?o1, ?mR, ?iR, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : vegetable, ?mR: fragileR, ?iR: immobileR, ?l : location} [40 * [agent_serves_vegetable(?a, ?o1, ?mR, ?iR, ?l) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : toBake, ?mR: fragileR, ?iR: immobileR, ?l : location} [20 * [agent_serves_baked(?a, ?o1, ?mR, ?iR, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : toBake, ?mR: fragileR, ?iR: immobileR, ?l : location} [40 * [agent_serves_baked(?a, ?o1, ?mR, ?iR, ?l) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : toBake, ?o2: toBake} [90 * [BakeACake(?a, ?o1, ?o2) ^ ~HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?o1 : drink, ?mR: fragileR, ?iR: immobileR, ?l : location} [20 * [agent_serves_drink(?a, ?o1, ?mR, ?iR, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?o1 : drink, ?mR: fragileR, ?iR: immobileR, ?l : location} [10 * [agent_serves_drink(?a, ?o1, ?mR, ?iR, ?l) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?i: item} [15 * [remaining_food_cleaned(?a, ?i) ^ ~HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent} [30 * [agent_washingDishes(?a) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent} [10 * [agent_washingDishes(?a) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent, ?l: location} [50 * [agent_Extinguish_Fire(?a, ?l) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent, ?l: location} [70 * [agent_Extinguish_Fire(?a, ?l) ^ HUMAN_AGENT(?a)]]]
             
             - [sum_{?a: agent} [40 * [Agent_WashingClothes(?a) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent} [60 * [Agent_WashingClothes(?a) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent} [40 * [Agent_IronClothes(?a) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent} [50 * [Agent_IronClothes(?a) ^ HUMAN_AGENT(?a)]]]

             - [sum_{?a: agent} [30 * [Agent_FoldClothes(?a) ^ ~HUMAN_AGENT(?a)]]]
             - [sum_{?a: agent} [50 * [Agent_FoldClothes(?a) ^ HUMAN_AGENT(?a)]]]

             - [10 * Laundry_Done]

             - [sum_{?a: agent, ?l: location} [10 * agent_holds_VC_hose(?a, ?l) ]]

             - [sum_{?a: agent, ?l: location} [45 * agent_starts_cleaning(?a, ?l) * ~HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?l: location} [50 * agent_starts_cleaning(?a, ?l) * HUMAN_AGENT(?a)]]

             - [sum_{?o: item, ?r : receptacle, ?l: location} [5 * robot_passes_to_human(?o, ?r, ?l) ]]

             - [sum_{?a: agent, ?o:item, ?l: location} [60 * agent_cleans_electronics(?a, ?o, ?l) * ~HUMAN_AGENT(?a)]]
             - [sum_{?a: agent, ?o:item, ?l: location} [20 * agent_cleans_electronics(?a, ?o, ?l) * HUMAN_AGENT(?a)]]

             - [sum_{?a : agent, ?r : immobileR, ?l: location} [20 * agent_cleans_receptacle(?a, ?r, ?l) * ~HUMAN_AGENT(?a)]]
             - [sum_{?a : agent, ?r : immobileR, ?l: location} [25 * agent_cleans_receptacle(?a, ?r, ?l) * HUMAN_AGENT(?a)]]

             - [sum_{?a : agent, ?i: item, ?iR: immobileR, ?l : location} [10 * clothes_prepared(?a, ?i, ?iR, ?l)]]

             - [sum_{?i : item} [5 * attached_for_charging(?i) ]]

             - [sum_{?i: item, ?iR: immobileR, ?l : location} [5 * agent_provides(?i, ?iR, ?l)]];


    action-preconditions {

        forall_{?a: agent, ?iR1: immobileR, ?iR2: immobileR, ?l1 : location, ?l2 : location} [Agent_moves_BR(?a, ?iR1, ?iR2, ?l1, ?l2) => agent_near(?a, ?iR1, ?l1) ^ agent_at(?a, ?l1) ^ immobileR_at(?iR1, ?l1) ^ immobileR_at(?iR2, ?l2) ];
    
        forall_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [Agent_Switches_on(?a, ?i, ?iR, ?l) => agent_switched_off(?a, ?i, ?iR, ?l) ^ agent_near(?a, ?iR, ?l) ^ ~heavy_obj_in_hand(?a) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~agent_switched_on(?a, ?i, ?iR, ?l)];
        forall_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [Agent_Switches_off(?a, ?i, ?iR, ?l) => ~agent_switched_off(?a, ?i, ?iR, ?l) ^ agent_near(?a, ?iR, ?l) ^ ~heavy_obj_in_hand(?a) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ agent_switched_on(?a, ?i, ?iR, ?l)];
    
        forall_{?a: agent, ?o: item, ?l : location} [agent_Switch_on_act(?a, ?o, ?l) => agent_switch_off(?a, ?o) ^ agent_at(?a, ?l) ^ bigObject_at(?o, ?l) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~agent_switch_on(?a, ?o, ?l)];
        forall_{?a: agent, ?o: item, ?l : location} [agent_Switch_off_act(?a, ?o, ?l) => ~agent_switch_off(?a, ?o) ^ agent_at(?a, ?l) ^ bigObject_at(?o, ?l) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ agent_switch_on(?a, ?o, ?l)];

        forall_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [Agent_PickUp(?a, ?i, ?iR, ?l) => agent_near(?a, ?iR, ?l) ^ stuff_at(?i, ?iR, ?l) ^ ~In_agent_hand(?a, ?i) ^ ~heavy_obj_in_hand(?a)];
        forall_{?a: agent, ?i: item, ?iR: immobileR, ?l : location} [Agent_PutDown(?a, ?i, ?iR, ?l) => agent_near(?a, ?iR, ?l) ^ In_agent_hand(?a, ?i) ^ ~COOKTOP(?iR) ^ ~stuff_at(?i, ?iR, ?l) ];

        forall_{?a: agent, ?o: item, ?iR: immobileR, ?l : location} [Human_Picks_S(?a, ?o, ?iR, ?l) => SENSITIVE(?o) ^ HUMAN_AGENT(?a) ^ agent_near(?a, ?iR, ?l) ^ stuff_at(?o, ?iR, ?l) ^ ~heavy_obj_in_hand(?a) ^ ~In_agent_hand(?a, ?o) ];
        forall_{?a: agent, ?o: item, ?iR: immobileR, ?l : location} [Human_PutDowns_S(?a, ?o, ?iR, ?l) => SENSITIVE(?o) ^ HUMAN_AGENT(?a) ^ agent_near(?a, ?iR, ?l) ^ In_agent_hand(?a, ?o) ^ ~stuff_at(?o, ?iR, ?l)];

        forall_{?a: agent, ?i: item, ?m: mobileR, ?iR: immobileR, ?l : location} [Agent_PutDownM(?a, ?i, ?m, ?iR, ?l) => agent_near(?a, ?iR, ?l) ^ receptacle_at(?m, ?iR, ?l) ^ (In_agent_hand(?a, ?i) | inhandmobileR(?a, ?m)) ^ ~item_in(?i, ?m, ?iR, ?l) ];

        forall_{?a: agent, ?o: item, ?m: mobileR, ?iR: immobileR, ?l : location} [Human_PutDown_S_MR(?a, ?o, ?m, ?iR, ?l) => SENSITIVE(?o) ^ HUMAN_AGENT(?a) ^ agent_near(?a, ?iR, ?l) ^ In_agent_hand(?a, ?o) ^ ~item_in(?o, ?m, ?iR, ?l)];

        forall_{?a: agent, ?o: item, ?l : location} [Agent_PicksUp_BigObject(?a, ?o, ?l) => agent_at(?a, ?l)^ bigObject_at(?o, ?l) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ ~inhandbigObject(?a, ?o)];
        forall_{?a: agent, ?o: item, ?l : location} [Agent_PutsDown_BigObject(?a, ?o, ?l) => agent_at(?a, ?l)^ ~bigObject_at(?o, ?l) ^ inhandbigObject(?a, ?o)];

        forall_{?a: agent, ?iR: immobileR, ?l : location} [Open_action(?a, ?iR, ?l) => agent_near(?a, ?iR, ?l) ^ ~open(?iR, ?l)];

        forall_{?a: agent, ?fR: mobileR, ?iR: immobileR, ?l : location} [Human_PicksUp_FReceptacle(?a, ?fR, ?iR, ?l) => FRAGILE(?fR) ^ HUMAN_AGENT(?a) ^ agent_near(?a, ?iR, ?l) ^ receptacle_at(?fR, ?iR, ?l) ^ ~heavy_obj_in_hand(?a) ^ ~inhandmobileR(?a, ?fR)];
        forall_{?a: agent, ?fR: mobileR, ?iR: immobileR, ?l : location} [Human_PutsDown_FReceptacle(?a, ?fR, ?iR, ?l) => FRAGILE(?fR) ^ HUMAN_AGENT(?a) ^ agent_near(?a, ?iR, ?l) ^ inhandmobileR(?a, ?fR) ^ ~COOKTOP(?iR)];

        forall_{?a: agent, ?mR: mobileR, ?iR: immobileR, ?l : location} [Agent_PicksUp_Receptacle(?a, ?mR, ?iR, ?l) => agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ ~heavy_obj_in_hand(?a) ^ ~inhandmobileR(?a, ?mR)];
        forall_{?a: agent, ?mR: mobileR, ?iR: immobileR, ?l : location} [Agent_PutsDown_Receptacle(?a, ?mR, ?iR, ?l) => agent_near(?a, ?iR, ?l) ^ inhandmobileR(?a, ?mR)];

        forall_{?a: agent, ?i : item} [agent_cleans(?a, ?i) =>  ~In_agent_hand(?a, ?i) ^ ~cleaned(?i) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ 
                                       ~heavy_obj_in_hand(?a) ^ [exists_{?i2: item, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ 
                                       agent_near(?a, ?iR, ?l) ^ stuff_at(?i, ?iR, ?l) ^ SINK_CONST(?iR) ^ KITCHEN_CONST(?l) ^ FAUCET_CONST(?i2)]] ];

        //forall_{?a: agent, ?o1 : sliceable, ?o2 : item} [agent_slice(?a, ?o1, ?o2) =>  SLICEABLE_ITEM(?o1) ^ SLICEABLE_ITEM(?o2) ^ EQUAL(?o1, ?o2) ^ ~In_agent_hand(?a, ?o1) ^ ~In_agent_hand(?a, ?o2) ^ 
        //                                                    ~sliced(?o2) ^ cleaned(?o1) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ 
        //                                                    [exists_{?iR: immobileR, ?l : location} [agent_near(?a, ?iR, ?l) ^ stuff_at(?o1, ?iR, ?l) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l) ]] ];
        
        //forall_{?a: agent, ?o1 : fruit, ?o2: fruit, ?o3: fruit, ?o4 : item} [Make_Fruit_Salad(?a, ?o1, ?o2, ?o3, ?o4) =>  FRUIT_ITEM(?o4) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ 
        //                                                        ~heavy_obj_in_hand(?a) ^ sliced(?o1) ^ sliced(?o2) ^ sliced(?o3) ^ SALAD(?o4) ^ ~salad_prepared(?o1, ?o2, ?o3) ^ 
        //                                                        ~prepared(?o4) ^ [exists_{?mR: mobileR, ?iR: immobileR, ?l : location} [agent_near(?a, ?iR, ?l) ^ item_in(?o1, ?mR, ?iR, ?l) ^
        //                                                        item_in(?o2, ?mR, ?iR, ?l) ^ item_in(?o3, ?mR, ?iR, ?l) ^ BOWL_1_CONST(?mR) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l) ]] ];

        //forall_{?a: agent, ?o1 : food, ?o2: item} [agent_cooks(?a, ?o1, ?o2) => FOOD_ITEM(?o2) ^ EQUAL(?o1, ?o2) ^ ~cooked(?o2) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ 
        //                                            cleaned(?o1) ^ [exists_{?i2: item, ?mR: mobileR, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ BURNER_SWITCH_CONST(?i2) ^ 
        //                                            agent_near(?a, ?iR, ?l) ^ item_in(?o1, ?mR, ?iR, ?l) ^ METAL_POT_CONST(?mR) ^ STOVE_BURNER_1_CONST(?iR) ^ KITCHEN_CONST(?l) ]] ];

        //forall_{?a: agent, ?o1 : toBoil, ?o2: item} [agent_boils(?a, ?o1, ?o2) => BOIL_ITEM(?o2) ^ EQUAL(?o1, ?o2) ^ ~boiled(?o2) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ 
        //[exists_{?i2: item, ?mR: mobileR, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ BURNER_SWITCH_CONST(?i2) ^ agent_near(?a, ?iR, ?l) ^ item_in(?o1, ?mR, ?iR, ?l) ^ METAL_POT_CONST(?mR) ^ STOVE_BURNER_2_CONST(?iR) ^ KITCHEN_CONST(?l) ]] ];

        //forall_{?a: agent, ?o1 : toRoast, ?o2: item} [agent_roast(?a, ?o1, ?o2) => ROAST_ITEM(?o2) ^ EQUAL(?o1, ?o2) ^ ~roasted(?o2) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ 
        //[exists_{?i2: item, ?mR: mobileR, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ BURNER_SWITCH_CONST(?i2) ^ agent_near(?a, ?iR, ?l) ^ item_in(?o1, ?mR, ?iR, ?l) ^ PAN_1_CONST(?mR) ^ STOVE_BURNER_3_CONST(?iR) ^ KITCHEN_CONST(?l) ]] ];

        //forall_{?a: agent, ?o1 : toFry, ?o2: item} [agent_prepare_eggs(?a, ?o1, ?o2) => FRY_ITEM(?o2) ^ EQUAL(?o1, ?o2) ^ ~egg_prepared(?o2) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ 
        //[exists_{?i2: item, ?mR: mobileR, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ BURNER_SWITCH_CONST(?i2) ^ agent_near(?a, ?iR, ?l) ^ item_in(?o1, ?mR, ?iR, ?l) ^ PAN_2_CONST(?mR) ^ STOVE_BURNER_4_CONST(?iR) ^ KITCHEN_CONST(?l) ]] ];
        
        forall_{?a: agent} [agent_prepares_pizza_base(?a) => ~pizza_base_prepared ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ 
                            [exists_{?i: item, ?mR: mobileR, ?iR: immobileR, ?l : location} [agent_near(?a, ?iR, ?l) ^ item_in(?i, ?mR, ?iR, ?l) ^ PIZZA_BASE_CONST(?i) ^ PAN_1_CONST(?mR) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l)]] ^ 
                            [exists_{?i: item, ?iR: immobileR, ?l : location} [stuff_at(?i, ?iR, ?l) ^ VEGGY_CONST(?i) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l)]] ^ 
                            [exists_{?i: item, ?iR: immobileR, ?l : location} [stuff_at(?i, ?iR, ?l) ^ SAUCE_CONST(?i) ^ COUNTERTOP_CONST(?iR) ^ KITCHEN_CONST(?l)]] ];

        forall_{?a: agent} [agent_bake_pizza(?a) => pizza_base_prepared ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ ~pizza_baked ^
                            [exists_{?i: item, ?iR: immobileR, ?l : location} [agent_near(?a, ?iR, ?l) ^ OVEN_CONST(?iR) ^ KITCHEN_CONST(?l)]] ^ 
                            [exists_{?i: item, ?iR: immobileR, ?l : location} [stuff_at(?i, ?iR, ?l) ^ PREPARED_PIZZA_BASE_CONST(?i) ^ OVEN_CONST(?iR) ^ KITCHEN_CONST(?l)]] ];

        forall_{?a: agent, ?mR: fragileR, ?iR: immobileR, ?l : location} [agent_serves_pizza(?a, ?mR, ?iR, ?l) => pizza_baked ^ ~heavy_obj_in_hand(?a) ^
                            agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ [exists_{?i : item} stuff_at(?i, ?iR, ?l) ^ BAKED_PIZZA_CONST(?i) ^ ~In_agent_hand(?a, ?i)] ^ 
                            ~pizza_served(?mR, ?iR, ?l)];
                            
        //forall_{?a: agent, ?o1 : food, ?mR: fragileR, ?iR: immobileR, ?l : location} [agent_serves_food(?a, ?o1, ?mR, ?iR, ?l) => [cooked(?o1) | boiled(?o1) | roasted(?o1) | egg_prepared(?o1)] ^
        //                    ~heavy_obj_in_hand(?a) ^ agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ stuff_at(?o1, ?iR, ?l) ^ ~In_agent_hand(?a, ?o1) ^ 
        //                    ~food_served(?o1, ?mR, ?iR, ?l)];
        
        //forall_{?a: agent, ?o1 : item, ?mR: fragileR, ?iR: immobileR, ?l : location} [agent_serves_fruit(?a, ?o1, ?mR, ?iR, ?l) => FRUIT_ITEM(?o1) ^ [sliced(?o1) | prepared(?o1)] ^
        //                    ~heavy_obj_in_hand(?a) ^ agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ stuff_at(?o1, ?iR, ?l) ^ ~In_agent_hand(?a, ?o1) ^ 
        //                    ~fruit_served(?o1, ?mR, ?iR, ?l)];

        //forall_{?a: agent, ?o1 : item, ?mR: fragileR, ?iR: immobileR, ?l : location} [agent_serves_vegetable(?a, ?o1, ?mR, ?iR, ?l) => VEGETABLE_ITEM(?o1) ^ [cleaned(?o1) ^ cooked(?o1)] ^
        //                    ~heavy_obj_in_hand(?a) ^ agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ stuff_at(?o1, ?iR, ?l) ^ ~In_agent_hand(?a, ?o1) ^ 
        //                    ~veggy_served(?o1, ?mR, ?iR, ?l)];

        //forall_{?a: agent, ?o1 : item, ?mR: fragileR, ?iR: immobileR, ?l : location} [agent_serves_baked(?a, ?o1, ?mR, ?iR, ?l) => BAKE_ITEM(?o1) ^ baked(?o1) ^
        //                    ~heavy_obj_in_hand(?a) ^ agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ stuff_at(?o1, ?iR, ?l) ^ ~In_agent_hand(?a, ?o1) ^ 
        //                    ~baked_served(?o1, ?mR, ?iR, ?l)];

        //forall_{?a: agent, ?o1 : toBake, ?o2 : item} [BakeACake(?a, ?o1, ?o2) => BAKE_ITEM(?o2) ^ ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^
        //                    [exists_{?i2: item, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ OVEN_SWITCH_CONST(?i2) ^ stuff_at(?o1, ?iR, ?l) ^ agent_near(?a, ?iR, ?l) ^ OVEN_CONST(?iR) ^ KITCHEN_CONST(?l)]] ^
        //                    ~baked(?o2) ^ EQUAL(?o1, ?o2)];


        forall_{?a: agent, ?o1 : drink, ?mR: fragileR, ?iR: immobileR, ?l : location} [agent_serves_drink(?a, ?o1, ?mR, ?iR, ?l) => ~drink_served(?o1, ?mR, ?iR, ?l) ^ 
                            stuff_at(?o1, ?iR, ?l) ^ agent_near(?a, ?iR, ?l) ^ receptacle_at(?mR, ?iR, ?l) ^ ~heavy_obj_in_hand(?a)];
        
        forall_{?a: agent, ?i: item} [remaining_food_cleaned(?a, ?i) => ~cleaned_remaining_food(?i) ^ 
                                         [exists_{?iR: immobileR, ?l : location} [stuff_at(?i, ?iR, ?l) ^ DUSTBIN_1_CONST(?iR) ^ KITCHEN_CONST(?l) ^ agent_near(?a, ?iR, ?l) ]] ];

        forall_{?a: agent} [agent_washingDishes(?a) => ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ ~heavy_obj_in_hand(?a) ^ ~dishes_cleaned ^
                            [exists_{?o1: item, ?i2: item, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ FAUCET_CONST(?i2) ^ stuff_at(?o1, ?iR, ?l) ^DIRTY_DISHES_CONST(?o1) ^ agent_near(?a, ?iR, ?l) ^ SINK_CONST(?iR) ^ KITCHEN_CONST(?l)]] ];

        forall_{?a: agent, ?l: location} [agent_Extinguish_Fire(?a, ?l) => ~FireExtinguished(?l) ^ [exists_{?o1: item} [bigObject_at(?o1,?l) ^ EXTINGUISHER_CONST(?o1) ^ agent_at(?a, ?l) ^ agent_switch_on(?a, ?o1, ?l)]] ];

        forall_{?a: agent} [Agent_WashingClothes(?a) => ~heavy_obj_in_hand(?a) ^ ~washed_clothes ^ 
        [exists_{?o1: item, ?i2: item, ?iR: immobileR, ?l : location} [agent_switched_on(?a, ?i2, ?iR, ?l) ^ WASHING_MACHINE_SWITCH_CONST(?i2) ^ stuff_at(?o1, ?iR, ?l) ^ CLOTHES_CONST(?o1) ^ agent_near(?a, ?iR, ?l) ^ WASHING_MACHINE_CONST(?iR) ^ BATHROOM_CONST(?l)]] ];

        forall_{?a: agent} [Agent_IronClothes(?a) => ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ washed_clothes ^ ~Ironed_Clothes ^ ~heavy_obj_in_hand(?a) ^
        [exists_{?o1: item, ?iR: immobileR, ?l : location} [stuff_at(?o1, ?iR, ?l) ^ CLEANED_CLOTHES_CONST(?o1) ^ agent_near(?a, ?iR, ?l) ^ IRONING_BOARD_CONST(?iR) ^ LIVING_ROOM_CONST(?l)]] ];

        forall_{?a: agent} [Agent_FoldClothes(?a) => ~hands_occupied_wo(?a) ^  ~hands_occupied_wr(?a) ^ Ironed_Clothes ^ ~clothes_folded ^ ~heavy_obj_in_hand(?a) ^
                    [exists_{?o1: item, ?iR: immobileR, ?l : location} [stuff_at(?o1, ?iR, ?l) ^ IRONED_CLOTHES_CONST(?o1) ^ agent_near(?a, ?iR, ?l) ^ IRONING_BOARD_CONST(?iR) ^ LIVING_ROOM_CONST(?l)]] ];

        [Laundry_Done => ~laundrydone ^ [exists_{?o1: item, ?iR: immobileR, ?l : location} [stuff_at(?o1, ?iR, ?l) ^ FOLDED_CLOTHES_CONST(?o1) ^ CLOSET_CONST(?iR) ^ LIVING_ROOM_CONST(?l)]] ];

        forall_{?a: agent, ?l: location} [agent_holds_VC_hose(?a, ?l) => agent_at(?a, ?l) ^ ~heavy_obj_in_hand(?a) ^ 
                                         [exists_{?h: agent, ?r: agent, ?o: item} [agent_switch_off(?h, ?o) ^ HUMAN_AGENT(?h) ^ agent_switch_off(?r, ?o) ^ ~HUMAN_AGENT(?r) ^ VACUUM_CLEANER_CONST(?o) ^ bigObject_at(?o, ?l)]] ];

        forall_{?a: agent, ?l: location} [agent_starts_cleaning(?a, ?l) => ~room_cleaned(?l) ^ 
                                                 [exists_{?o: item} [agent_switch_on(?a, ?o, ?l) ^ VACUUM_CLEANER_CONST(?o) ^ agent_hold(?a, ?o, ?l) ]] ];

        forall_{?o: item, ?recep : receptacle, ?l: location} [robot_passes_to_human(?o, ?recep, ?l) => 
        [exists_{?h: agent, ?r: agent}(agent_at(?h, ?l) ^ HUMAN_AGENT(?h) ^ ~HUMAN_AGENT(?r) ^ (In_agent_hand(?r, ?o) | inhandbigObject(?r, ?o)) ^ ~hands_occupied_wo(?h) ^  ~hands_occupied_wr(?h) ^ ~heavy_obj_in_hand(?h) ^ ~In_agent_hand(?h, ?o) )] ];
    
        forall_{?a: agent, ?o:item, ?l: location} [agent_cleans_electronics(?a, ?o, ?l) => ELECTRONICS(?o) ^ ~electronics_cleaned(?o, ?l) ^ agent_at(?a, ?l) ^ 
        [exists_{?i : item}(inhandbigObject(?a, ?i) ^ DUSTING_CLOTH_CONST(?i))] ];

        [all_electronic_item_cleaned => ~electronic_items_cleaned ^ 
        [exists_{?i1 : item, ?i2 : item, ?i3 : item, ?l : location} (electronics_cleaned(?i1, ?l) ^ electronics_cleaned(?i2, ?l) ^ electronics_cleaned(?i3, ?l) ^ TV_CONST(?i1) ^ MUSIC_PLAYER_CONST(?i2) ^ COMPUTER_CONST(?i3) ^ LIVING_ROOM_CONST(?l) )] ];

        [house_cleaned => ~all_rooms_cleaned ^ [exists_{?l1 : location, ?l2 : location, ?l3 : location} (room_cleaned(?l1) ^ room_cleaned(?l2) ^ room_cleaned(?l3) ^ LIVING_ROOM_CONST(?l1) ^ BATHROOM_CONST(?l2) ^ KITCHEN_CONST(?l3) )] ^ 
        [exists_{?h: agent, ?r: agent, ?o: item} [agent_switch_off(?h, ?o) ^ HUMAN_AGENT(?h) ^ agent_switch_off(?r, ?o) ^ ~HUMAN_AGENT(?r) ^ VACUUM_CLEANER_CONST(?o) ]] ];

        //[office_table_ready => ~office_ready ^  
        //[exists_{?r: immobileR, ?l: location} (receptacle_cleaned(?r, ?l) ^ WORKING_TABLE_CONST(?r) ^ LIVING_ROOM_CONST(?l))] ^
        //[exists_{?a : agent, ?i2: item, ?iR: immobileR, ?l: location} agent_switched_on(?a, ?i2, ?iR, ?l) ^ LAPTOP_SWITCH_CONST(?i2) ^ WORKING_TABLE_CONST(?iR) ^ LIVING_ROOM_CONST(?l) ^ ~HUMAN_AGENT(?a)] ^
        //[exists_{?a : agent, ?i : item} (inhandbigObject(?a, ?i) ^ DUSTING_CLOTH_CONST(?i)) ^ ~HUMAN_AGENT(?a)] ];

        //forall_{?a : agent, ?r : immobileR, ?l: location} [agent_cleans_receptacle(?a, ?r, ?l) => agent_near(?a, ?r, ?l) ^ ~receptacle_cleaned(?r, ?l) ^
        //[exists_{?i : item} (inhandbigObject(?a, ?i) ^ DUSTING_CLOTH_CONST(?i))] ];

        //forall_{?a : agent, ?o1 : item, ?o2 : item, ?o3 : item} [~HUMAN_AGENT(?a) ^ prepare_office_bag(?a, ?o1, ?o2, ?o3) => ~bag_prepared(?o1, ?o2, ?o3) ^ 
        //[exists_{?mR: mobileR, ?iR: immobileR, ?l: location} [item_in(?o1, ?mR, ?iR, ?l) ^ item_in(?o2, ?mR, ?iR, ?l) ^ item_in(?o3, ?mR, ?iR, ?l) ^ OFFICE_BAG_CONST(?mR) ^ WORKING_TABLE_CONST(?iR) ^ LIVING_ROOM_CONST(?l) ]] ];

        forall_{?a : agent, ?i: item, ?iR: immobileR, ?l : location} [clothes_prepared(?a, ?i, ?iR, ?l) => stuff_at(?i, ?iR, ?l) ^ ~prepared_clothes(?i, ?iR, ?l) ^ CLOTHES_CONST(?i) ];

        forall_{?i : item} [attached_for_charging(?i) => ~charged(?i) ^ [exists_{?iR: immobileR, ?l: location}[stuff_at(?i, ?iR,?l) ^ WORKING_TABLE_CONST(?iR) ^ LIVING_ROOM_CONST(?l)]] ];

        forall_{?o : toBake} [party_starts(?o) => ~[exists_{?l: location} [party_at(?l) ^ LIVING_ROOM_CONST(?l)]] ^ 
        [exists_{?a : agent, ?i : item, ?l :location} [agent_switch_on(?a, ?i, ?l) ^ COLOR_LIGHTS_CONST(?i) ^ LIVING_ROOM_CONST(?l) ]] ^ 
        [exists_{?a : agent, ?i : item, ?l :location} [agent_switch_on(?a, ?i, ?l) ^ MUSIC_PLAYER_CONST(?i) ^ LIVING_ROOM_CONST(?l) ]] ^ 
        [exists_{?a : agent, ?iR: immobileR, ?l: location} [agent_near(?a, ?iR, ?l) ^ HUMAN_AGENT(?a) ^ WORKING_TABLE_CONST(?iR) ^ LIVING_ROOM_CONST(?l)]] ^
        [exists_{?mR: fragileR, ?iR : immobileR, ?l: location} [baked_served(?o, ?mR, ?iR, ?l) ^ PLATE_1_CONST(?mR) ^ WORKING_TABLE_CONST(?iR) ^ LIVING_ROOM_CONST(?l)]] ];

        forall_{?i: item, ?iR: immobileR, ?l : location} [agent_provides(?i, ?iR, ?l) => provided_at(?i, ?iR, ?l) ^ 
        [exists_{?h: agent, ?r: agent} [agent_near(?r, ?iR, ?l) ^ agent_at(?h, ?l) ^ HUMAN_AGENT(?h) ^ ~HUMAN_AGENT(?r) ^ In_agent_hand(?r, ?i)] ] ];

    };

}
