
non-fluents nf_instance_serve_eggs_inst {
    domain = domain_x_robot_anticipation;

    // Objects in the domain
    objects {
        location : {fridge, sink, stove, coffeetable, microwave, countertop, cabinet};
        item : {plate, broom, water, mop, eggs, plate_1, pan};
        agent : {robot};
        human : {human};
    };

    non-fluents {
        COST(robot, fridge, fridge) = 0;
COST(robot, fridge, sink) = 20;
COST(robot, fridge, stove) = 15;
COST(robot, fridge, coffeetable) = 17;
COST(robot, fridge, microwave) = 12;
COST(robot, fridge, countertop) = 19;
COST(robot, fridge, cabinet) = 13;
COST(robot, sink, fridge) = 20;
COST(robot, sink, sink) = 0;
COST(robot, sink, stove) = 14;
COST(robot, sink, coffeetable) = 18;
COST(robot, sink, microwave) = 16;
COST(robot, sink, countertop) = 20;
COST(robot, sink, cabinet) = 14;
COST(robot, stove, fridge) = 16;
COST(robot, stove, sink) = 17;
COST(robot, stove, stove) = 0;
COST(robot, stove, coffeetable) = 16;
COST(robot, stove, microwave) = 16;
COST(robot, stove, countertop) = 19;
COST(robot, stove, cabinet) = 15;
COST(robot, coffeetable, fridge) = 18;
COST(robot, coffeetable, sink) = 13;
COST(robot, coffeetable, stove) = 17;
COST(robot, coffeetable, coffeetable) = 0;
COST(robot, coffeetable, microwave) = 12;
COST(robot, coffeetable, countertop) = 20;
COST(robot, coffeetable, cabinet) = 17;
COST(robot, microwave, fridge) = 13;
COST(robot, microwave, sink) = 12;
COST(robot, microwave, stove) = 12;
COST(robot, microwave, coffeetable) = 12;
COST(robot, microwave, microwave) = 0;
COST(robot, microwave, countertop) = 18;
COST(robot, microwave, cabinet) = 10;
COST(robot, countertop, fridge) = 15;
COST(robot, countertop, sink) = 19;
COST(robot, countertop, stove) = 18;
COST(robot, countertop, coffeetable) = 16;
COST(robot, countertop, microwave) = 20;
COST(robot, countertop, countertop) = 0;
COST(robot, countertop, cabinet) = 19;
COST(robot, cabinet, fridge) = 17;
COST(robot, cabinet, sink) = 18;
COST(robot, cabinet, stove) = 17;
COST(robot, cabinet, coffeetable) = 13;
COST(robot, cabinet, microwave) = 14;
COST(robot, cabinet, countertop) = 15;
COST(robot, cabinet, cabinet) = 0;
FRAGILE(plate_1) = true;
FRAGILE(plate) = true;
FOOD_ITEM(water) = true;
FOOD_ITEM(eggs) = true;
MOP_ITEM(mop) = true;
MOP_ITEM(broom) = true;
CONTAINER(plate_1) = true;
CONTAINER(plate) = true;
EQUAL(plate, plate_1) = true;
APPLIANCE(fridge) = true;
APPLIANCE(microwave) = true;
APPLIANCE(stove) = true;

    };
}

instance instance_serve_eggs {
    domain = domain_x_robot_anticipation;
    non-fluents = nf_instance_serve_eggs_inst;

    init-state {
        agent-loc(robot, fridge) = true;
        human-loc(human, cabinet) = true;

        obj-loc(mop, cabinet) = true;
        obj-loc(broom, cabinet) = true;
        obj-loc(water, sink) = true;
        obj-loc(eggs, fridge) = true;
        obj-loc(plate, countertop) = true;
        obj-loc(plate_1, countertop) = true;
        obj-loc(pan, countertop) = true;
    };

    max-nondef-actions = 2;
    horizon = 20;
    discount = 1.0;
}
    